import scipy
import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial import Delaunay
points = np.array([[0,0],
[0.00107,0.00544],
[	0.00428	,	0.01064	],
[	0.00961	,	0.01683	],
[	0.01704	,	0.02346	],
[	0.02653	,	0.03048	],
[	0.03806	,	0.03741	],
[	0.05156	,	0.04463	],
[	0.06699	,	0.05204	],
[	0.08427	,	0.05944	],
[	0.10332	,	0.06652	],
[	0.12408	,	0.07342	],
[	0.14645	,	0.07979	],
[	0.17033	,	0.08583	],
[	0.19562	,	0.09121	],
[	0.22221	,	0.09614	],
[	0.25	,	0.10031	],
[	0.27886	,	0.10386	],
[	0.30866	,	0.10652	],
[	0.33928	,	0.10852	],
[	0.37059	,	0.10964	],
[	0.40245	,	0.11015	],
[	0.43474	,	0.1098	],
[	0.4673	,	0.10879	],
[	0.5	,	0.10692	],
[	0.5327	,	0.1044	],
[	0.56526	,	0.10105	],
[	0.59755	,	0.09709	],
[	0.62941	,	0.09238	],
[	0.66072	,	0.08721	],
[	0.69134	,	0.08155	],
[	0.72114	,	0.07565	],
[	0.75	,	0.06952	],
[	0.77779	,	0.06344	],
[	0.8043801	,	0.05733	],
[	0.82967	,	0.05138	],
[	0.85355	,	0.04548	],
[	0.8759201	,	0.03985	],
[	0.89668	,	0.03437	],
[	0.91573	,	0.02923	],
[	0.93301	,	0.02428	],
[	0.94844	,	0.01968	],
[	0.96194	,	0.01529	],
[	0.97347	,	0.01129	],
[	0.98296	,	0.00763	],
[	0.99039	,	0.00444	],
[	0.99572	,	0.00196	],
[	0.99893	,	0.00031	],
[	1	,	0	],
[	0	,	0	],
[	0.00107	,	-0.00324	],
[	0.00428	,	-0.00624	],
[	0.00961	,	-0.00874	],
[	0.01704	,	-0.01015	],
[	0.02653	,	-0.01079	],
[	0.03806	,	-0.01087	],
[	0.05156	,	-0.01059	],
[	0.06699	,	-0.00995	],
[	0.08427	,	-0.00904	],
[	0.10332	,	-0.00793	],
[	0.12408	,	-0.00668	],
[	0.14645	,	-0.00524	],
[	0.17033	,	-0.0037	],
[	0.19562	,	-0.00198	],
[	0.22221	,	-0.00015	],
[	0.25	,	0.00185	],
[	0.27886	,	0.00391	],
[	0.30866	,	0.00615	],
[	0.33928	,	0.00847	],
[	0.37059	,	0.01099	],
[	0.40245	,	0.01356	],
[	0.43474	,	0.01622	],
[	0.4673	,	0.01885	],
[	0.5	,	0.02147	],
[	0.5327	,	0.02391	],
[	0.56526	,	0.0261	],
[	0.59755	,	0.0279	],
[	0.62941	,	0.02936	],
[	0.66072	,	0.03037	],
[	0.69134	,	0.03099	],
[	0.72114	,	0.03117	],
[	0.75	,	0.03097	],
[	0.77779	,	0.03036	],
[	0.8043801	,	0.02937	],
[	0.82967	,	0.02797	],
[	0.85355	,	0.02619	],
[	0.8759201	,	0.02407	],
[	0.89668	,	0.02169	],
[	0.91573	,	0.01911	],
[	0.93301	,	0.01639	],
[	0.94844	,	0.01357	],
[	0.96194	,	0.01071	],
[	0.97347	,	0.0079	],
[	0.98296	,	0.00527	],
[	0.99039	,	0.0031	],
[	0.99572	,	0.00136	],
[	0.99893	,	0.00016	],
[	1	,	0	]])

def normal_data(data):
    

    previous=None
    next=data[2]
    normals=[]
    print(range(len(data)))

    for i in range(len(data)):
        pair=data[i] 
        plt.plot(pair[0],pair[1],'o')
normal_data(points)


tri = Delaunay(points,furthest_site=False)
res = []
for t in tri.simplices:
  A,B,C = points[t[0]],points[t[1]],points[t[2]]
  e1 = B-A; e2 = C-A
  num = np.dot(e1, e2)
  n1 = np.linalg.norm(e1); n2 = np.linalg.norm(e2)
  denom =  n1 * n2
  d1 = np.rad2deg(np.arccos(num/denom))
  e1 = C-B; e2 = A-B
  num = np.dot(e1, e2)
  denom = np.linalg.norm(e1) * np.linalg.norm(e2)
  d2 = np.rad2deg(np.arccos(num/denom))
  d3 = 180-d1-d2
  res.append([n1,n2,d1,d2,d3])
res = np.array(res)
m = res[:,[0,1]].mean()*res[:,[0,1]].std()

mask = np.any(res[:,[2,3,4]] > 110) & (res[:,0] < m) & (res[:,1] < m )

plt.triplot(points[:,0], points[:,1], tri.simplices[mask])
plt.show()

